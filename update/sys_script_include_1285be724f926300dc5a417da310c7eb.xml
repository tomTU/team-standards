<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_38339_teamstand.TeamStandards</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Processor script for finding offending records against best practice conditions within the TeamStandards application</description>
        <name>TeamStandards</name>
        <script><![CDATA[var TeamStandards = Class.create();
TeamStandards.prototype = {
	initialize: function() {

		// Predefined values
		this.STANDARDS_TABLE = 'x_38339_teamstand_coding_standard';
		this.STANDARD_CONDITIONS_TABLE = 'x_38339_teamstand_coding_standard_condition';

		this.queryParams = "";

	},

	/*_________________________________________________________________
    * Description: Given a record Sys ID, build an object of all rows that match the related condition records
    * Parameters: standardSysID [string] - Sys ID of the coding standard we are checking
    * Returns: Array of record objects that match the conditions associated to the coding standard supplied
    ________________________________________________________________*/
	checkStandard: function( standardSysID, queryParams ) {

		if ( queryParams ) {
			this.queryParams = queryParams;
		}

		var offenders = [];

		// Query each related condition record to return a list of offending records
		offenders = this._getAndCheckConditions( standardSysID );

		return offenders;

	},

	/*_________________________________________________________________
    * Description: Given a coding standard Sys ID, loop through each condition and concat the offenders into an array
    * Parameters: standardSysID [string] - Sys ID of the coding standard we are checking
    * Returns: Array of record objects that match the conditions associated to the coding standard supplied
    ________________________________________________________________*/
	_getAndCheckConditions: function( standardSysID ) {

		var standardOffenders = [];

		var grCond = new GlideRecord( this.STANDARD_CONDITIONS_TABLE );
		grCond.addQuery( 'coding_standard', standardSysID );
		grCond.addQuery( 'active', true );
		grCond.query();

		while ( grCond.next() ) {
			// Get a list of the objects to return
			var offTemp = this._findOffenders( grCond );
			if ( offTemp ) {
				standardOffenders = standardOffenders.concat( offTemp );
			}
		}

		return standardOffenders;

	},

	/*_________________________________________________________________
    * Description: Given a table and condition, find matching records
    * Parameters: table [string] - Technical name of the table to search
				  condition [string] - Encoded query string contained in the condition of the Condition record
    * Returns: Array of record objects that match the condition on the given table
    ________________________________________________________________*/
	_findOffenders: function( grCond ) {

		var individualOffenders = [];
		var scriptedEval = grCond.scripted.toString();
		var query = this._calcQuery();

		var grTable = new GlideRecord( grCond.table.toString() );
		if ( scriptedEval == 'false' ) {
			grTable.addEncodedQuery( grCond.condition.toString() );
		}
		grTable.addQuery( query );
		grTable.query();

		while ( grTable.next() ) {
			if ( scriptedEval == 'true' ) {
				var offensive = new GlideScopedEvaluator().evaluateScript(grCond, 'script', {'current': grTable});
				if ( offensive )
					individualOffenders.push( this._buildOffender( grTable ) );
			} else {
				individualOffenders.push( this._buildOffender( grTable ) );
			}
		}

		return individualOffenders;

	},

	/*_________________________________________________________________
    * Description: Create an object
    * Parameters: grTable [GlideRecord] - a record on a pre-selected table
    * Returns: [Object] - Generic properties required from the given GlideRecord
    ________________________________________________________________*/
	_buildOffender: function( grTable ) {
		return {
			display_name: grTable.getDisplayValue(),
			table: grTable.getTableName(),
			sys_id: grTable.getUniqueValue(),
			sys_updated_by: grTable.sys_updated_by.toString(),
			sys_updated_on: grTable.sys_updated_on.toString()
		};
	},

	/*_________________________________________________________________
    * Description: Calculate a query based on input query parameters
    * Parameters: n/a
    * Returns: query [String] - encoded query string to use in the condition query
    ________________________________________________________________*/
	_calcQuery: function() {
		// Don't bother continuing if there are no parameters given
		if ( !this.queryParams ) {
			return "";
		}
		var query = "";

		// Switch on the query search type
		switch( this.queryParams.searchType.value ) {
			case 'user':
				// Searching for a single users updates
				query = "sys_updated_by=" + this.queryParams.user.value;
				break;
			case 'multipleUsers':
				// Searching for multiple users updates input as a string separated list of user IDs
				query = "sys_updated_byIN" + this.queryParams.users.value;
				break;
			case 'all':
				query = "sys_updated_by!=admin^sys_updated_by!=maint^sys_updated_by!=glide.maint";
				// Search on all users that are not OOB (this might get complicated, ignore admin and maint for now but there are others)
				break;
			default:
				gs.error( "No searchType defined in the query parameters" );
		}
		
		// Now we need to check if any date parameters have been used
		// Date can be AFTER the start date && BEFORE the end date. Either may/may not exist
		if ( this.queryParams.dateRange.startDate ) {
			query += "^sys_updated_on>=" + this.queryParams.dateRange.startDate;
		}
		
		if ( this.queryParams.dateRange.endDate ) {
			query += "^sys_updated_on<=" + this.queryParams.dateRange.endDate;
		}
		
		return query;
		
	},


	type: 'TeamStandards'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin_tc</sys_created_by>
        <sys_created_on>2018-12-14 17:20:32</sys_created_on>
        <sys_id>1285be724f926300dc5a417da310c7eb</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>TeamStandards</sys_name>
        <sys_package display_value="TeamStandards" source="x_38339_teamstand">26a1f9a24f562300dc5a417da310c7f6</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TeamStandards">26a1f9a24f562300dc5a417da310c7f6</sys_scope>
        <sys_update_name>sys_script_include_1285be724f926300dc5a417da310c7eb</sys_update_name>
        <sys_updated_by>admin_tc</sys_updated_by>
        <sys_updated_on>2018-12-21 16:38:16</sys_updated_on>
    </sys_script_include>
</record_update>
